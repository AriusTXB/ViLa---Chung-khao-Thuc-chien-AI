#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
AI Multi-Modal Generator
Ch∆∞∆°ng tr√¨nh t√≠ch h·ª£p Chat, Image Generation, Video Generation v√† Text-to-Speech
S·ª≠ d·ª•ng API AI Th·ª±c Chi·∫øn
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog, scrolledtext
import json
import os
import base64
import time
import threading
import requests
import logging
from datetime import datetime
from openai import OpenAI
from PIL import Image, ImageTk
import io

class AIGenerator:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("AI Multi-Modal Generator")
        self.root.geometry("1000x700")
        
        # Session management
        self.session_id = None
        self.session_folder = None
        self.api_key = None
        self.client = None
        
        # Chat history
        self.chat_history = []
        
        # Setup logging
        self.setup_logging()
        
        # Setup GUI
        self.setup_gui()
        
    def setup_logging(self):
        """Thi·∫øt l·∫≠p h·ªá th·ªëng logging"""
        # T·∫°o folder logs n·∫øu ch∆∞a c√≥
        os.makedirs("logs", exist_ok=True)
        
        # C·∫•u h√¨nh logging
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(f'logs/ai_generator_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log', encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
        self.logger.info("=== AI Multi-Modal Generator Started ===")
        
    def log_session(self, message):
        """Log v·ªõi session info"""
        if self.session_folder:
            log_file = os.path.join(self.session_folder, "session.log")
            with open(log_file, "a", encoding="utf-8") as f:
                f.write(f"{datetime.now().isoformat()} - {message}\n")
        
    def setup_gui(self):
        """Thi·∫øt l·∫≠p giao di·ªán ch√≠nh"""
        # T·∫°o notebook cho c√°c tabs
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # T·∫°o c√°c tabs
        self.create_settings_tab()
        self.create_chat_tab()
        self.create_image_tab()
        self.create_video_tab()
        self.create_tts_tab()
        
        # Disable t·∫•t c·∫£ tabs tr·ª´ Settings
        self.disable_all_tabs_except_settings()
        
    def create_settings_tab(self):
        """T·∫°o tab Settings"""
        self.settings_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.settings_frame, text="‚öôÔ∏è Settings")
        
        # API Key input
        ttk.Label(self.settings_frame, text="API Key:", font=("Arial", 12, "bold")).pack(pady=10)
        
        self.api_key_var = tk.StringVar()
        api_entry = ttk.Entry(self.settings_frame, textvariable=self.api_key_var, 
                            width=60, show="*", font=("Arial", 10))
        api_entry.pack(pady=5)
        
        # Save button
        save_btn = ttk.Button(self.settings_frame, text="üíæ Save & Start", 
                             command=self.save_api_key)
        save_btn.pack(pady=10)
        
        # Status label
        self.status_label = ttk.Label(self.settings_frame, text="Ch∆∞a c√≥ API key", 
                                     foreground="red")
        self.status_label.pack(pady=5)
        
        # Instructions
        instructions = """
H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:
1. Nh·∫≠p API key c·ªßa b·∫°n v√†o √¥ tr√™n
2. Click "Save & Start" ƒë·ªÉ b·∫Øt ƒë·∫ßu
3. S·ª≠ d·ª•ng c√°c tab kh√°c ƒë·ªÉ t·∫°o n·ªôi dung
4. T·∫•t c·∫£ output s·∫Ω ƒë∆∞·ª£c l∆∞u trong folder data/session_YYYYMMDD_HHMMSS/
        """
        ttk.Label(self.settings_frame, text=instructions, justify=tk.LEFT).pack(pady=20)
        
    def create_chat_tab(self):
        """T·∫°o tab Chat"""
        self.chat_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.chat_frame, text="üí¨ Chat")
        
        # Chat history display
        self.chat_display = scrolledtext.ScrolledText(self.chat_frame, height=20, 
                                                    state=tk.DISABLED, wrap=tk.WORD)
        self.chat_display.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Input frame
        input_frame = ttk.Frame(self.chat_frame)
        input_frame.pack(fill=tk.X, padx=10, pady=5)
        
        self.chat_input = tk.Text(input_frame, height=3, wrap=tk.WORD)
        self.chat_input.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        send_btn = ttk.Button(input_frame, text="üì§ Send", command=self.send_chat_message)
        send_btn.pack(side=tk.RIGHT, padx=(10, 0))
        
        # Bind Enter key
        self.chat_input.bind("<Control-Return>", lambda e: self.send_chat_message())
        
    def create_image_tab(self):
        """T·∫°o tab Image Generation"""
        self.image_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.image_frame, text="üñºÔ∏è Image")
        
        # Mode selection
        mode_frame = ttk.LabelFrame(self.image_frame, text="Ch·∫ø ƒë·ªô", padding=10)
        mode_frame.pack(fill=tk.X, padx=10, pady=5)
        
        self.image_mode = tk.StringVar(value="text_to_image")
        ttk.Radiobutton(mode_frame, text="Text ‚Üí Image", variable=self.image_mode, 
                       value="text_to_image").pack(anchor=tk.W)
        ttk.Radiobutton(mode_frame, text="Image ‚Üí Image", variable=self.image_mode, 
                       value="image_to_image").pack(anchor=tk.W)
        
        # Prompt input
        prompt_frame = ttk.LabelFrame(self.image_frame, text="M√¥ t·∫£", padding=10)
        prompt_frame.pack(fill=tk.X, padx=10, pady=5)
        
        self.image_prompt = tk.Text(prompt_frame, height=3, wrap=tk.WORD)
        self.image_prompt.pack(fill=tk.X)
        
        # Image input (for image-to-image mode)
        self.image_input_frame = ttk.LabelFrame(self.image_frame, text="·∫¢nh ƒë·∫ßu v√†o", padding=10)
        self.image_input_frame.pack(fill=tk.X, padx=10, pady=5)
        
        self.image_path_var = tk.StringVar()
        path_entry = ttk.Entry(self.image_input_frame, textvariable=self.image_path_var, 
                              state=tk.DISABLED)
        path_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 10))
        
        browse_btn = ttk.Button(self.image_input_frame, text="üìÅ Browse", 
                              command=self.browse_image)
        browse_btn.pack(side=tk.RIGHT)
        
        # Generate button
        generate_btn = ttk.Button(self.image_frame, text="üé® Generate Image", 
                                command=self.generate_image)
        generate_btn.pack(pady=10)
        
        # Preview frame
        self.preview_frame = ttk.LabelFrame(self.image_frame, text="Preview", padding=10)
        self.preview_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        self.image_preview = ttk.Label(self.preview_frame, text="Ch∆∞a c√≥ ·∫£nh")
        self.image_preview.pack(expand=True)
        
    def create_video_tab(self):
        """T·∫°o tab Video Generation"""
        self.video_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.video_frame, text="üé¨ Video")
        
        # Prompt input
        prompt_frame = ttk.LabelFrame(self.video_frame, text="M√¥ t·∫£ video", padding=10)
        prompt_frame.pack(fill=tk.X, padx=10, pady=5)
        
        self.video_prompt = tk.Text(prompt_frame, height=3, wrap=tk.WORD)
        self.video_prompt.pack(fill=tk.X)
        
        # Image input (optional)
        image_frame = ttk.LabelFrame(self.video_frame, text="·∫¢nh ƒë·∫ßu v√†o (t√πy ch·ªçn)", padding=10)
        image_frame.pack(fill=tk.X, padx=10, pady=5)
        
        self.video_image_path_var = tk.StringVar()
        path_entry = ttk.Entry(image_frame, textvariable=self.video_image_path_var, 
                              state=tk.DISABLED)
        path_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 10))
        
        browse_btn = ttk.Button(image_frame, text="üìÅ Browse", 
                              command=self.browse_video_image)
        browse_btn.pack(side=tk.RIGHT)
        
        # Settings
        settings_frame = ttk.LabelFrame(self.video_frame, text="C√†i ƒë·∫∑t", padding=10)
        settings_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # Aspect ratio
        ttk.Label(settings_frame, text="T·ª∑ l·ªá khung h√¨nh:").grid(row=0, column=0, sticky=tk.W)
        self.aspect_ratio = tk.StringVar(value="16:9")
        aspect_combo = ttk.Combobox(settings_frame, textvariable=self.aspect_ratio, 
                                   values=["16:9", "9:16", "1:1"])
        aspect_combo.grid(row=0, column=1, sticky=tk.W, padx=(10, 0))
        
        # Resolution
        ttk.Label(settings_frame, text="ƒê·ªô ph√¢n gi·∫£i:").grid(row=1, column=0, sticky=tk.W)
        self.resolution = tk.StringVar(value="720p")
        res_combo = ttk.Combobox(settings_frame, textvariable=self.resolution, 
                                values=["720p", "1080p"])
        res_combo.grid(row=1, column=1, sticky=tk.W, padx=(10, 0))
        
        # Generate button
        generate_btn = ttk.Button(self.video_frame, text="üé¨ Generate Video", 
                               command=self.generate_video)
        generate_btn.pack(pady=10)
        
        # Progress bar
        self.progress_var = tk.StringVar(value="S·∫µn s√†ng")
        self.progress_label = ttk.Label(self.video_frame, textvariable=self.progress_var)
        self.progress_label.pack(pady=5)
        
        self.progress_bar = ttk.Progressbar(self.video_frame, mode='indeterminate')
        self.progress_bar.pack(fill=tk.X, padx=10, pady=5)
        
    def create_tts_tab(self):
        """T·∫°o tab Text-to-Speech"""
        self.tts_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.tts_frame, text="üé§ TTS")
        
        # Text input
        text_frame = ttk.LabelFrame(self.tts_frame, text="VƒÉn b·∫£n", padding=10)
        text_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        self.tts_text = scrolledtext.ScrolledText(text_frame, height=10, wrap=tk.WORD)
        self.tts_text.pack(fill=tk.BOTH, expand=True)
        
        # Voice selection
        voice_frame = ttk.LabelFrame(self.tts_frame, text="Gi·ªçng n√≥i", padding=10)
        voice_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Label(voice_frame, text="Ch·ªçn gi·ªçng:").pack(side=tk.LEFT)
        self.voice_var = tk.StringVar(value="Zephyr")
        voice_combo = ttk.Combobox(voice_frame, textvariable=self.voice_var,
                                  values=["Zephyr", "Puck", "Charon", "Kore"])
        voice_combo.pack(side=tk.LEFT, padx=(10, 0))
        
        # Generate button
        generate_btn = ttk.Button(self.tts_frame, text="üé§ Generate Audio", 
                                command=self.generate_tts)
        generate_btn.pack(pady=10)
        
        # Status
        self.tts_status = ttk.Label(self.tts_frame, text="S·∫µn s√†ng")
        self.tts_status.pack(pady=5)
        
    def disable_all_tabs_except_settings(self):
        """Disable t·∫•t c·∫£ tabs tr·ª´ Settings"""
        for i in range(1, self.notebook.index("end")):
            self.notebook.tab(i, state="disabled")
            
    def enable_all_tabs(self):
        """Enable t·∫•t c·∫£ tabs"""
        for i in range(self.notebook.index("end")):
            self.notebook.tab(i, state="normal")
            
    def save_api_key(self):
        """L∆∞u API key v√† kh·ªüi t·∫°o session"""
        self.logger.info("=== B·∫Øt ƒë·∫ßu qu√° tr√¨nh l∆∞u API key ===")
        
        api_key = self.api_key_var.get().strip()
        if not api_key:
            self.logger.warning("Ng∆∞·ªùi d√πng ch∆∞a nh·∫≠p API key")
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p API key!")
            return
            
        self.logger.info(f"API key ƒë∆∞·ª£c nh·∫≠p: {api_key[:10]}...{api_key[-4:]}")
        
        try:
            self.api_key = api_key
            self.client = OpenAI(api_key=api_key, base_url="https://api.thucchien.ai")
            self.logger.info("OpenAI client ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng")
            
            # Test API key tr∆∞·ªõc khi ti·∫øp t·ª•c
            self.logger.info("ƒêang ki·ªÉm tra API key...")
            if not self._test_api_key():
                self.logger.error("API key kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n")
                messagebox.showerror("L·ªói", "API key kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!\nVui l√≤ng ki·ªÉm tra l·∫°i API key c·ªßa b·∫°n.")
                return
            
            # T·∫°o session m·ªõi
            self.create_new_session()
            
            # Enable t·∫•t c·∫£ tabs
            self.enable_all_tabs()
            
            # Update status
            self.status_label.config(text="‚úÖ API key ƒë√£ ƒë∆∞·ª£c l∆∞u v√† x√°c th·ª±c", foreground="green")
            
            self.logger.info("API key ƒë√£ ƒë∆∞·ª£c l∆∞u v√† x√°c th·ª±c th√†nh c√¥ng, t·∫•t c·∫£ tabs ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t")
            messagebox.showinfo("Th√†nh c√¥ng", "API key ƒë√£ ƒë∆∞·ª£c l∆∞u v√† x√°c th·ª±c th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c ch·ª©c nƒÉng kh√°c.")
            
        except Exception as e:
            self.logger.error(f"L·ªói khi l∆∞u API key: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói khi l∆∞u API key: {str(e)}")
    
    def _test_api_key(self):
        """Test API key v·ªõi m·ªôt request ƒë∆°n gi·∫£n"""
        try:
            # Test v·ªõi chat API (ƒë∆°n gi·∫£n nh·∫•t)
            url = "https://api.thucchien.ai/chat/completions"
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {self.api_key}"
            }
            payload = {
                "model": "gemini-2.5-flash",
                "messages": [{"role": "user", "content": "Hi"}],
                "max_tokens": 10
            }
            
            response = requests.post(url, headers=headers, json=payload, timeout=10)
            if response.status_code == 200:
                self.logger.info("API key h·ª£p l·ªá")
                return True
            else:
                self.logger.error(f"API key test failed: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            self.logger.error(f"L·ªói khi test API key: {str(e)}")
            return False
        
    def create_new_session(self):
        """T·∫°o session m·ªõi v·ªõi timestamp"""
        self.logger.info("=== T·∫°o session m·ªõi ===")
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.session_id = f"session_{timestamp}"
        self.session_folder = os.path.join("data", self.session_id)
        
        self.logger.info(f"Session ID: {self.session_id}")
        self.logger.info(f"Session folder: {self.session_folder}")
        
        # T·∫°o folder structure
        os.makedirs(self.session_folder, exist_ok=True)
        os.makedirs(os.path.join(self.session_folder, "images"), exist_ok=True)
        os.makedirs(os.path.join(self.session_folder, "videos"), exist_ok=True)
        os.makedirs(os.path.join(self.session_folder, "audio"), exist_ok=True)
        
        self.logger.info("ƒê√£ t·∫°o c·∫•u tr√∫c folder cho session")
        
        # T·∫°o session info
        session_info = {
            "session_id": self.session_id,
            "created_at": datetime.now().isoformat(),
            "api_calls": 0
        }
        
        with open(os.path.join(self.session_folder, "session_info.json"), "w", encoding="utf-8") as f:
            json.dump(session_info, f, ensure_ascii=False, indent=2)
            
        self.logger.info("ƒê√£ t·∫°o session_info.json")
        
        # Initialize chat history
        self.chat_history = [{"role": "system", "content": "B·∫°n l√† m·ªôt tr·ª£ l√Ω ·∫£o th√¢n thi·ªán, chuy√™n nghi·ªáp, n√≥i ti·∫øng Vi·ªát t·ª± nhi√™n."}]
        
        self.logger.info("Session m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng")
        self.log_session("Session m·ªõi ƒë∆∞·ª£c t·∫°o")
        
    def send_chat_message(self):
        """G·ª≠i tin nh·∫Øn chat"""
        self.logger.info("=== B·∫Øt ƒë·∫ßu qu√° tr√¨nh chat ===")
        
        if not self.client:
            self.logger.warning("Client ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o, y√™u c·∫ßu nh·∫≠p API key")
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p API key tr∆∞·ªõc!")
            return
            
        message = self.chat_input.get("1.0", tk.END).strip()
        if not message:
            self.logger.warning("Tin nh·∫Øn r·ªóng, b·ªè qua")
            return
            
        self.logger.info(f"Tin nh·∫Øn ng∆∞·ªùi d√πng: {message[:50]}...")
        
        # Clear input
        self.chat_input.delete("1.0", tk.END)
        
        # Add to history
        self.chat_history.append({"role": "user", "content": message})
        self.logger.info("ƒê√£ th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠")
        
        # Display user message
        self.display_chat_message("üë§ B·∫°n", message)
        
        # Get AI response
        try:
            self.logger.info("ƒêang g·ªçi API chat completions...")
            start_time = time.time()
            
            response = self.client.chat.completions.create(
                model="gemini-2.5-flash",
                messages=self.chat_history
            )
            
            end_time = time.time()
            self.logger.info(f"API chat ho√†n th√†nh trong {end_time - start_time:.2f} gi√¢y")
            
            ai_message = response.choices[0].message.content
            self.logger.info(f"Ph·∫£n h·ªìi AI: {ai_message[:50]}...")
            
            self.chat_history.append({"role": "assistant", "content": ai_message})
            self.logger.info("ƒê√£ th√™m ph·∫£n h·ªìi AI v√†o l·ªãch s·ª≠")
            
            # Display AI response
            self.display_chat_message("ü§ñ AI", ai_message)
            
            # Save chat history
            self.save_chat_history()
            
            self.log_session(f"Chat: User: {message[:30]}... | AI: {ai_message[:30]}...")
            
        except Exception as e:
            self.logger.error(f"L·ªói khi g·ªçi API chat: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói khi g·ªçi API: {str(e)}")
            
    def display_chat_message(self, sender, message):
        """Hi·ªÉn th·ªã tin nh·∫Øn trong chat"""
        self.chat_display.config(state=tk.NORMAL)
        self.chat_display.insert(tk.END, f"{sender}: {message}\n\n")
        self.chat_display.config(state=tk.DISABLED)
        self.chat_display.see(tk.END)
        
    def save_chat_history(self):
        """L∆∞u l·ªãch s·ª≠ chat"""
        with open(os.path.join(self.session_folder, "chat_history.json"), "w", encoding="utf-8") as f:
            json.dump(self.chat_history, f, ensure_ascii=False, indent=2)
            
    def browse_image(self):
        """Ch·ªçn ·∫£nh cho image-to-image mode"""
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn ·∫£nh",
            filetypes=[("Image files", "*.png *.jpg *.jpeg *.gif *.bmp")]
        )
        if file_path:
            self.image_path_var.set(file_path)
            
    def browse_video_image(self):
        """Ch·ªçn ·∫£nh cho video generation"""
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn ·∫£nh",
            filetypes=[("Image files", "*.png *.jpg *.jpeg *.gif *.bmp")]
        )
        if file_path:
            self.video_image_path_var.set(file_path)
            
    def generate_image(self):
        """T·∫°o ·∫£nh"""
        self.logger.info("=== B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫°o ·∫£nh ===")
        
        if not self.client:
            self.logger.warning("Client ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o, y√™u c·∫ßu nh·∫≠p API key")
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p API key tr∆∞·ªõc!")
            return
            
        prompt = self.image_prompt.get("1.0", tk.END).strip()
        if not prompt:
            self.logger.warning("Ng∆∞·ªùi d√πng ch∆∞a nh·∫≠p m√¥ t·∫£ ·∫£nh")
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p m√¥ t·∫£ ·∫£nh!")
            return
            
        mode = self.image_mode.get()
        self.logger.info(f"Ch·∫ø ƒë·ªô t·∫°o ·∫£nh: {mode}")
        self.logger.info(f"Prompt: {prompt[:50]}...")
        
        try:
            if mode == "text_to_image":
                self.logger.info("B·∫Øt ƒë·∫ßu t·∫°o ·∫£nh t·ª´ text...")
                start_time = time.time()
                
                # Text to image - Y CHANG NOTEBOOK - d√πng client.images.generate()
                response = self.client.images.generate(
                    model="gemini-2.5-flash-image-preview",
                    prompt=prompt,
                    n=1,
                    extra_body={
                        "aspect_ratio": "1:1"
                    }
                )
                
                end_time = time.time()
                self.logger.info(f"API t·∫°o ·∫£nh ho√†n th√†nh trong {end_time - start_time:.2f} gi√¢y")
                
                # Save image - Y CHANG NOTEBOOK
                b64_data = response.data[0].b64_json
                image_data = base64.b64decode(b64_data)
                self.logger.info(f"ƒê√£ decode ·∫£nh, k√≠ch th∆∞·ªõc: {len(image_data)} bytes")
                
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"image_{timestamp}.png"
                filepath = os.path.join(self.session_folder, "images", filename)
                
                with open(filepath, "wb") as f:
                    f.write(image_data)
                    
                self.logger.info(f"ƒê√£ l∆∞u ·∫£nh t·∫°i: {filepath}")
                
                # Update preview
                self.update_image_preview(filepath)
                self.logger.info("ƒê√£ c·∫≠p nh·∫≠t preview ·∫£nh")
                
                # Save metadata
                metadata = {
                    "type": "text_to_image",
                    "prompt": prompt,
                    "filename": filename,
                    "created_at": datetime.now().isoformat()
                }
                
                with open(os.path.join(self.session_folder, "images", f"{filename}.json"), "w", encoding="utf-8") as f:
                    json.dump(metadata, f, ensure_ascii=False, indent=2)
                    
                self.logger.info("ƒê√£ l∆∞u metadata cho ·∫£nh")
                self.log_session(f"Image Generation (Text): {prompt[:30]}... -> {filename}")
                
                messagebox.showinfo("Th√†nh c√¥ng", f"·∫¢nh ƒë√£ ƒë∆∞·ª£c t·∫°o v√† l∆∞u t·∫°i: {filepath}")
                
            else:  # image_to_image
                self.logger.info("B·∫Øt ƒë·∫ßu t·∫°o ·∫£nh t·ª´ ·∫£nh c√≥ s·∫µn...")
                
                image_path = self.image_path_var.get()
                if not image_path or not os.path.exists(image_path):
                    self.logger.warning("Kh√¥ng t√¨m th·∫•y ·∫£nh ƒë·∫ßu v√†o")
                    messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn ·∫£nh ƒë·∫ßu v√†o!")
                    return
                    
                self.logger.info(f"·∫¢nh ƒë·∫ßu v√†o: {image_path}")
                
                # Read and encode image
                with open(image_path, "rb") as f:
                    image_b64 = base64.b64encode(f.read()).decode("utf-8")
                    
                self.logger.info(f"ƒê√£ encode ·∫£nh, k√≠ch th∆∞·ªõc base64: {len(image_b64)} characters")
                    
                # Call Gemini API for image-to-image
                self.logger.info("ƒêang g·ªçi Gemini API cho image-to-image...")
                start_time = time.time()
                
                headers = {
                    "x-goog-api-key": self.api_key,
                    "Content-Type": "application/json"
                }
                
                payload = {
                    "contents": [{
                        "parts": [
                            {
                                "text": (
                                    f"Here is an image. Please generate a new version "
                                    f"based on this image with the following modification: {prompt}. "
                                    f"The new image should reflect this change realistically."
                                )
                            },
                            {
                                "inline_data": {
                                    "mime_type": "image/png",
                                    "data": image_b64
                                }
                            }
                        ]
                    }],
                    "generationConfig": {
                        "imageConfig": {
                            "aspectRatio": "1:1"
                        }
                    }
                }
                
                self.logger.info("ƒêang g·ª≠i request ƒë·∫øn Gemini API...")
                response = requests.post(
                    "https://api.thucchien.ai/gemini/v1beta/models/gemini-2.5-flash-image-preview:generateContent",
                    headers=headers,
                    json=payload
                )
                
                end_time = time.time()
                self.logger.info(f"Gemini API ho√†n th√†nh trong {end_time - start_time:.2f} gi√¢y")
                
                if response.status_code != 200:
                    self.logger.error(f"API error: {response.status_code} - {response.text}")
                    messagebox.showerror("L·ªói", f"API error: {response.status_code} - {response.text}")
                    return
                    
                data = response.json()
                self.logger.info("ƒê√£ nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ Gemini API")
                
                # Extract image data - x·ª≠ l√Ω nh∆∞ trong notebook
                try:
                    parts = data["candidates"][0]["content"]["parts"]
                    img_b64 = None
                    for p in parts:
                        if "inline_data" in p:
                            img_b64 = p["inline_data"]["data"]
                        elif "inlineData" in p:
                            img_b64 = p["inlineData"]["data"]
                            
                    if not img_b64:
                        self.logger.error("Gemini kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu ·∫£nh")
                        messagebox.showerror("L·ªói", f"Gemini kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu ·∫£nh. Ph·∫£n h·ªìi API:\n{json.dumps(data, indent=2)}")
                        return
                        
                    self.logger.info(f"ƒê√£ tr√≠ch xu·∫•t d·ªØ li·ªáu ·∫£nh, k√≠ch th∆∞·ªõc: {len(img_b64)} characters")
                except Exception as e:
                    self.logger.error(f"L·ªói khi x·ª≠ l√Ω ph·∫£n h·ªìi API: {str(e)}")
                    messagebox.showerror("L·ªói", f"L·ªói khi x·ª≠ l√Ω ph·∫£n h·ªìi API: {str(e)}\n{json.dumps(data, indent=2)}")
                    return
                    
                # Save image
                img_data = base64.b64decode(img_b64)
                self.logger.info(f"ƒê√£ decode ·∫£nh, k√≠ch th∆∞·ªõc: {len(img_data)} bytes")
                
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"image_edited_{timestamp}.png"
                filepath = os.path.join(self.session_folder, "images", filename)
                
                with open(filepath, "wb") as f:
                    f.write(img_data)
                    
                self.logger.info(f"ƒê√£ l∆∞u ·∫£nh ch·ªânh s·ª≠a t·∫°i: {filepath}")
                
                # Update preview
                self.update_image_preview(filepath)
                self.logger.info("ƒê√£ c·∫≠p nh·∫≠t preview ·∫£nh")
                
                # Save metadata
                metadata = {
                    "type": "image_to_image",
                    "prompt": prompt,
                    "input_image": image_path,
                    "filename": filename,
                    "created_at": datetime.now().isoformat()
                }
                
                with open(os.path.join(self.session_folder, "images", f"{filename}.json"), "w", encoding="utf-8") as f:
                    json.dump(metadata, f, ensure_ascii=False, indent=2)
                    
                self.logger.info("ƒê√£ l∆∞u metadata cho ·∫£nh ch·ªânh s·ª≠a")
                self.log_session(f"Image Generation (Edit): {prompt[:30]}... -> {filename}")
                
                messagebox.showinfo("Th√†nh c√¥ng", f"·∫¢nh ƒë√£ ƒë∆∞·ª£c ch·ªânh s·ª≠a v√† l∆∞u t·∫°i: {filepath}")
                
        except Exception as e:
            self.logger.error(f"L·ªói khi t·∫°o ·∫£nh: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói khi t·∫°o ·∫£nh: {str(e)}")
            
    def update_image_preview(self, image_path):
        """C·∫≠p nh·∫≠t preview ·∫£nh"""
        try:
            # Load and resize image for preview
            image = Image.open(image_path)
            image.thumbnail((300, 300), Image.Resampling.LANCZOS)
            
            # Convert to PhotoImage
            photo = ImageTk.PhotoImage(image)
            
            # Update label
            self.image_preview.config(image=photo, text="")
            self.image_preview.image = photo  # Keep a reference
            
        except Exception as e:
            self.image_preview.config(text=f"L·ªói hi·ªÉn th·ªã ·∫£nh: {str(e)}")
            
    def generate_video(self):
        """T·∫°o video (ch·∫°y trong thread ri√™ng)"""
        self.logger.info("=== B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫°o video ===")
        
        if not self.client:
            self.logger.warning("Client ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o, y√™u c·∫ßu nh·∫≠p API key")
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p API key tr∆∞·ªõc!")
            return
            
        prompt = self.video_prompt.get("1.0", tk.END).strip()
        if not prompt:
            self.logger.warning("Ng∆∞·ªùi d√πng ch∆∞a nh·∫≠p m√¥ t·∫£ video")
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p m√¥ t·∫£ video!")
            return
            
        self.logger.info(f"Prompt video: {prompt[:50]}...")
        self.logger.info("B·∫Øt ƒë·∫ßu t·∫°o video trong thread ri√™ng...")
        
        # Start video generation in separate thread
        thread = threading.Thread(target=self._generate_video_thread, args=(prompt,))
        thread.daemon = True
        thread.start()
        
    def _generate_video_thread(self, prompt):
        """Thread function ƒë·ªÉ t·∫°o video"""
        try:
            self.logger.info("=== B∆∞·ªõc 1: T·∫°o request video ===")
            # Step 1: Create video
            self.progress_var.set("ƒêang t·∫°o video...")
            self.progress_bar.start()
            
            operation_name = self._create_video_request(prompt)
            if not operation_name:
                self.logger.error("Kh√¥ng th·ªÉ t·∫°o request video")
                return
                
            self.logger.info(f"ƒê√£ t·∫°o request video, operation: {operation_name}")
                
            # Step 2: Check progress
            self.logger.info("=== B∆∞·ªõc 2: Ki·ªÉm tra ti·∫øn ƒë·ªô video ===")
            self.progress_var.set("ƒêang ch·ªù video ho√†n th√†nh... (c√≥ th·ªÉ m·∫•t v√†i ph√∫t)")
            video_id = self._check_video_progress(operation_name)
            if not video_id:
                self.logger.error("Kh√¥ng th·ªÉ l·∫•y video ID")
                self.progress_var.set("L·ªói: Kh√¥ng th·ªÉ l·∫•y video ID")
                return
                
            self.logger.info(f"Video ƒë√£ ho√†n th√†nh, video ID: {video_id}")
                
            # Step 3: Download video
            self.logger.info("=== B∆∞·ªõc 3: T·∫£i video ===")
            self.progress_var.set("ƒêang t·∫£i video...")
            self._download_video(video_id)
            
            self.progress_var.set("Video ƒë√£ ho√†n th√†nh!")
            self.progress_bar.stop()
            self.logger.info("Qu√° tr√¨nh t·∫°o video ho√†n th√†nh th√†nh c√¥ng")
            self.log_session(f"Video Generation: {prompt[:30]}... -> completed")
            
        except Exception as e:
            self.logger.error(f"L·ªói khi t·∫°o video: {str(e)}")
            self.progress_var.set(f"L·ªói: {str(e)}")
            self.progress_bar.stop()
            messagebox.showerror("L·ªói", f"L·ªói khi t·∫°o video: {str(e)}")
            
    def _create_video_request(self, prompt):
        """T·∫°o request video - theo ƒë√∫ng notebook"""
        self.logger.info("ƒêang t·∫°o request video...")
        url = "https://api.thucchien.ai/gemini/v1beta/models/veo-3.0-generate-001:predictLongRunning"
        
        # Check if image is provided - theo ƒë√∫ng logic notebook
        image_path = self.video_image_path_var.get()
        image_obj = None
        if image_path and os.path.exists(image_path):
            self.logger.info(f"S·ª≠ d·ª•ng ·∫£nh ƒë·∫ßu v√†o: {image_path}")
            with open(image_path, "rb") as f:
                img_b64 = base64.b64encode(f.read()).decode("utf-8")
            
            # S·ª≠ d·ª•ng mimetypes nh∆∞ trong notebook
            import mimetypes
            mime_type, _ = mimetypes.guess_type(image_path)
            if not mime_type:
                mime_type = "image/png"
                
            image_obj = {
                "bytesBase64Encoded": img_b64,
                "mimeType": mime_type
            }
            self.logger.info(f"ƒê√£ encode ·∫£nh, k√≠ch th∆∞·ªõc: {len(img_b64)} characters, mime_type: {mime_type}")
        else:
            self.logger.info("Kh√¥ng c√≥ ·∫£nh ƒë·∫ßu v√†o, t·∫°o video t·ª´ text")
            
        instance = {"prompt": prompt}
        if image_obj:
            instance["image"] = image_obj
            
        payload = {
            "instances": [instance],
            "parameters": {
                "negativePrompt": "blurry, low quality",
                "aspectRatio": self.aspect_ratio.get(),
                "resolution": self.resolution.get(),
                "personGeneration": "allow_all" if not image_obj else "allow_adult"
            }
        }
        
        self.logger.info(f"T·∫°o video v·ªõi prompt: {prompt}")
        print(f"\nTao video voi prompt: {prompt}")
        if image_obj:
            self.logger.info(f"S·ª≠ d·ª•ng ·∫£nh l√†m ƒë·∫ßu v√†o: {image_path}")
            print(f"Su dung anh lam dau vao: {image_path}")
        self.logger.info(f"Payload video: aspect_ratio={self.aspect_ratio.get()}, resolution={self.resolution.get()}")
        
        headers = {
            "Content-Type": "application/json",
            "x-goog-api-key": self.api_key
        }
        
        self.logger.info("ƒêang g·ª≠i request t·∫°o video...")
        start_time = time.time()
        response = requests.post(url, headers=headers, json=payload)
        end_time = time.time()
        
        self.logger.info(f"Request video ho√†n th√†nh trong {end_time - start_time:.2f} gi√¢y")
        
        if response.status_code != 200:
            self.logger.error(f"L·ªói t·∫°o video: {response.status_code} - {response.text}")
            messagebox.showerror("L·ªói", f"L·ªói t·∫°o video: {response.status_code}")
            return None
            
        data = response.json()
        operation_name = data.get("name")
        if not operation_name:
            self.logger.error("Kh√¥ng t√¨m th·∫•y operation_name trong ph·∫£n h·ªìi")
            self.logger.error(f"Ph·∫£n h·ªìi API: {json.dumps(data, indent=2)}")
            messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y operation_name trong ph·∫£n h·ªìi")
            return None
            
            self.logger.info("ƒê√£ g·ª≠i y√™u c·∫ßu t·∫°o video th√†nh c√¥ng")
        self.logger.info(f"M√£ ti·∫øn tr√¨nh (operation): {operation_name}")
        print(f"Da gui yeu cau tao video thanh cong.")
        print(f"Ma tien trinh (operation): {operation_name}")
        return operation_name
        
    def _check_video_progress(self, operation_name):
        """Ki·ªÉm tra ti·∫øn ƒë·ªô video - theo ƒë√∫ng notebook"""
        self.logger.info(f"B·∫Øt ƒë·∫ßu ki·ªÉm tra ti·∫øn ƒë·ªô video: {operation_name}")
        
        # X·ª≠ l√Ω URL nh∆∞ trong notebook
        if operation_name.startswith("models/"):
            url = f"https://api.thucchien.ai/gemini/v1beta/{operation_name}"
        else:
            url = f"https://api.thucchien.ai/gemini/v1beta/models/veo-3.0-generate-001/operations/{operation_name}"
            
        headers = {"x-goog-api-key": self.api_key}
        
        self.logger.info("ƒêang ki·ªÉm tra ti·∫øn ƒë·ªô video...")
        print("\nDang kiem tra tien do video...")
        check_count = 0
        
        while True:
            check_count += 1
            self.logger.info(f"Ki·ªÉm tra ti·∫øn ƒë·ªô l·∫ßn {check_count}...")
            
            response = requests.get(url, headers=headers)
            if response.status_code != 200:
                self.logger.error(f"L·ªói khi ki·ªÉm tra ti·∫øn ƒë·ªô: {response.status_code} - {response.text}")
                messagebox.showerror("L·ªói", f"L·ªói khi ki·ªÉm tra ti·∫øn ƒë·ªô: {response.status_code}")
                return None
                
            data = response.json()
            done = data.get("done", False)
            
            if done:
                self.logger.info("Video ƒë√£ ho√†n th√†nh!")
                
                # Extract video ID - theo ƒë√∫ng logic notebook
                video_id = None
                try:
                    uri = (
                        data["response"]["generateVideoResponse"]
                        ["generatedSamples"][0]["video"]["uri"]
                    )
                    # R√∫t ID t·ª´ URI
                    if ":download" in uri:
                        video_id = uri.split("/")[-1].split(":")[0]
                except Exception:
                    # fallback cho c·∫•u tr√∫c c≈©
                    try:
                        video_id = data["response"]["video"]["name"]
                    except:
                        pass
                        
                if not video_id:
                    self.logger.error("Kh√¥ng t√¨m th·∫•y video_id trong ph·∫£n h·ªìi")
                    self.logger.error(f"Ph·∫£n h·ªìi API: {json.dumps(data, indent=2)}")
                    messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ tr√≠ch xu·∫•t video ID")
                    return None
                    
                self.logger.info(f"Video ID: {video_id}")
                print(f"Video da hoan tat!")
                print(f"Video ID: {video_id}")
                return video_id
            else:
                progress = data.get("metadata", {}).get("progressPercent", "ƒêang x·ª≠ l√Ω")
                self.logger.info(f"Ti·∫øn ƒë·ªô: {progress}% - ch·ªù 60 gi√¢y tr∆∞·ªõc khi ki·ªÉm tra l·∫°i...")
                print(f"Tien do: {progress}% - cho 60 giay truoc khi kiem tra lai...")
                self.progress_var.set(f"ƒêang x·ª≠ l√Ω video... {progress}% - ch·ªù 60 gi√¢y...")
                time.sleep(60)  # Ch·ªù 60 gi√¢y nh∆∞ trong notebook
                
    def _download_video(self, video_id):
        """T·∫£i video - theo ƒë√∫ng notebook"""
        if not video_id:
            self.logger.error("Kh√¥ng c√≥ video_id ƒë·ªÉ t·∫£i")
            messagebox.showerror("L·ªói", "Kh√¥ng c√≥ video_id ƒë·ªÉ t·∫£i")
            return
            
        self.logger.info(f"B·∫Øt ƒë·∫ßu t·∫£i video: {video_id}")
        url = f"https://api.thucchien.ai/gemini/download/v1beta/files/{video_id}:download?alt=media"
        headers = {"x-goog-api-key": self.api_key}
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"video_{timestamp}.mp4"
        filepath = os.path.join(self.session_folder, "videos", filename)
        
        self.logger.info(f"ƒêang t·∫£i video v·ªÅ: {filepath}")
        print(f"\nDang tai video ve: {filepath}")
        start_time = time.time()
        
        response = requests.get(url, headers=headers, stream=True)
        if response.status_code != 200:
            self.logger.error(f"L·ªói khi t·∫£i video: {response.status_code} - {response.text}")
            messagebox.showerror("L·ªói", f"L·ªói khi t·∫£i video: {response.status_code}")
            return
            
        total_size = 0
        with open(filepath, "wb") as f:
            for chunk in response.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)
                    total_size += len(chunk)
                    
        end_time = time.time()
        self.logger.info(f"Video ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng: {filepath}")
        self.logger.info(f"ƒê√£ t·∫£i video ho√†n th√†nh trong {end_time - start_time:.2f} gi√¢y, k√≠ch th∆∞·ªõc: {total_size} bytes")
        print(f"Video da duoc tai thanh cong: {filepath}")
        
        # Save metadata
        metadata = {
            "video_id": video_id,
            "filename": filename,
            "created_at": datetime.now().isoformat(),
            "file_size": total_size
        }
        
        with open(os.path.join(self.session_folder, "videos", f"{filename}.json"), "w", encoding="utf-8") as f:
            json.dump(metadata, f, ensure_ascii=False, indent=2)
            
        self.logger.info("ƒê√£ l∆∞u metadata cho video")
        messagebox.showinfo("Th√†nh c√¥ng", f"Video ƒë√£ ƒë∆∞·ª£c t·∫£i v√† l∆∞u t·∫°i: {filepath}")
        
    def generate_tts(self):
        """T·∫°o text-to-speech v·ªõi Gemini API"""
        self.logger.info("=== B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫°o TTS ===")
        
        if not self.api_key:
            self.logger.warning("API key ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o, y√™u c·∫ßu nh·∫≠p API key")
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p API key tr∆∞·ªõc!")
            return
            
        text = self.tts_text.get("1.0", tk.END).strip()
        if not text:
            self.logger.warning("Ng∆∞·ªùi d√πng ch∆∞a nh·∫≠p vƒÉn b·∫£n")
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p vƒÉn b·∫£n!")
            return
            
        voice = self.voice_var.get()
        self.logger.info(f"T·∫°o TTS v·ªõi gi·ªçng: {voice}")
        self.logger.info(f"VƒÉn b·∫£n: {text[:50]}...")
        
        try:
            self.logger.info("ƒêang g·ªçi Gemini API TTS...")
            start_time = time.time()
            
            # G·ªçi Gemini API theo ƒë√∫ng t√†i li·ªáu
            url = "https://api.thucchien.ai/gemini/v1beta/models/gemini-2.5-flash-preview-tts:generateContent"
            
            headers = {
                "x-goog-api-key": self.api_key,
                "Content-Type": "application/json"
            }
            
            payload = {
                "contents": [{
                    "parts": [
                        {"text": text}
                    ]
                }],
                "generationConfig": {
                    "responseModalities": ["AUDIO"],
                    "speechConfig": {
                        "voiceConfig": {
                            "prebuiltVoiceConfig": {
                                "voiceName": voice
                            }
                        }
                    }
                }
            }
            
            response = requests.post(url, headers=headers, json=payload)
            
            end_time = time.time()
            self.logger.info(f"API TTS ho√†n th√†nh trong {end_time - start_time:.2f} gi√¢y")
            
            if response.status_code != 200:
                self.logger.error(f"API error: {response.status_code} - {response.text}")
                messagebox.showerror("L·ªói", f"API error: {response.status_code}")
                return
            
            # L·∫•y audio data t·ª´ response theo c·∫•u tr√∫c Gemini
            data = response.json()
            audio_b64 = data["candidates"][0]["content"]["parts"][0]["inlineData"]["data"]
            audio_data = base64.b64decode(audio_b64)
            
            self.logger.info(f"ƒê√£ decode audio, k√≠ch th∆∞·ªõc: {len(audio_data)} bytes")
            
            # Save audio
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"audio_{timestamp}.wav"
            filepath = os.path.join(self.session_folder, "audio", filename)
            
            self.logger.info(f"ƒêang l∆∞u audio t·∫°i: {filepath}")
            
            with open(filepath, "wb") as f:
                f.write(audio_data)
                        
            self.logger.info(f"ƒê√£ l∆∞u audio, k√≠ch th∆∞·ªõc: {len(audio_data)} bytes")
                        
            # Save metadata
            metadata = {
                "text": text,
                "voice": voice,
                "filename": filename,
                "created_at": datetime.now().isoformat(),
                "file_size": len(audio_data)
            }
            
            with open(os.path.join(self.session_folder, "audio", f"{filename}.json"), "w", encoding="utf-8") as f:
                json.dump(metadata, f, ensure_ascii=False, indent=2)
                
            self.logger.info("ƒê√£ l∆∞u metadata cho audio")
            self.log_session(f"TTS: {text[:30]}... (voice: {voice}) -> {filename}")
            
            self.tts_status.config(text=f"‚úÖ Audio ƒë√£ ƒë∆∞·ª£c t·∫°o: {filename}")
            messagebox.showinfo("Th√†nh c√¥ng", f"Audio ƒë√£ ƒë∆∞·ª£c t·∫°o v√† l∆∞u t·∫°i: {filepath}")
            
        except Exception as e:
            self.logger.error(f"L·ªói khi t·∫°o audio: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói khi t·∫°o audio: {str(e)}")
            
    def run(self):
        """Ch·∫°y ·ª©ng d·ª•ng"""
        self.root.mainloop()

if __name__ == "__main__":
    app = AIGenerator()
    app.run()
